name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ['1.21', '1.22']
        build-type: [regular, efi]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Install libkrun dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libkrun-dev || echo "libkrun-dev not available, continuing..."

    - name: Install libkrun dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install dependencies for macOS
        brew install pkg-config || true

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests (regular)
      if: matrix.build-type == 'regular'
      run: |
        go test -v ./...

    - name: Run tests (EFI)
      if: matrix.build-type == 'efi'
      run: |
        go test -tags efi -v ./...

    - name: Build chroot_vm
      if: matrix.build-type == 'regular'
      run: |
        go build -o chroot_vm ./cmd/chroot_vm

    - name: Build boot_efi
      if: matrix.build-type == 'efi'
      run: |
        go build -tags efi -o boot_efi ./cmd/boot_efi

    - name: Build all examples
      run: |
        go build -o simple_test ./cmd/simple_test
        go build -o feature_test ./cmd/feature_test
        go build -o advanced_test ./cmd/advanced_test

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install libkrun dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libkrun-dev || echo "libkrun-dev not available, continuing..."

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

    - name: Run golangci-lint (EFI build)
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m --build-tags=efi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: results.sarif

  build-matrix:
    name: Build Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            make_target: "all"
          - os: macos-latest
            make_target: "all"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install libkrun dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          pkg-config \
          libkrun-dev || echo "libkrun-dev not available, continuing..."

    - name: Install libkrun dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config || true

    - name: Build with Makefile (regular)
      run: make ${{ matrix.make_target }}

    - name: Build with Makefile (EFI)
      run: EFI=1 make ${{ matrix.make_target }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.os }}
        path: |
          chroot_vm
          boot_efi
        retention-days: 7
